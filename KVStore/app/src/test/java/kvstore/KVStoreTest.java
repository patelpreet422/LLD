/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kvstore;

import kvstore.strategy.HashStrategy;
import kvstore.util.Result;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class KVStoreTest {

    private KVStore kvStore;
    private HashStrategy hashStrategy;

    @BeforeEach
    void setUp() {
        hashStrategy = mock(HashStrategy.class);
        kvStore = new KVStore(hashStrategy);
    }

    @Test
    void testAddKeyWithOkResult() throws Throwable {
        String key = "testKey";
        String value = "testValue";
        Result<Long> okResult = Result.ok(123L);

        when(hashStrategy.hash(key)).thenReturn(okResult);

        kvStore.begin();
        kvStore.addKey(key, value);

        assertEquals(value, kvStore.getValue(key));
    }

    @Test
    void testAddKeyWithErrResult() throws Throwable {
        String key = "testKey";
        String value = "testValue";

        Throwable throwable = new Exception("Hashing failed");
        Result<Long> errResult = Result.err(throwable);
        when(hashStrategy.hash(key)).thenReturn(errResult);

        kvStore.begin();
        kvStore.addKey(key, value);

        when(hashStrategy.hash(key)).thenReturn(Result.ok(1L));
        assertNull(kvStore.getValue(key));

    }

    @Test
    void testGetValue() throws Throwable {
        String key = "testKey";
        String value = "testValue";

        Result<Long> okResult = Result.ok(123L);
        when(hashStrategy.hash(key)).thenReturn(okResult);

        kvStore.begin();
        kvStore.addKey(key, value);

        assertEquals(value, kvStore.getValue(key));
    }

    @Test
    void testGetValueWithHashingFailure() {
        String key = "testKey";
        Result<Long> errResult = Result.err(new Exception("Hashing failed"));

        when(hashStrategy.hash(key)).thenReturn(errResult);

        kvStore.begin();
        assertThrows(Exception.class, () -> {
            kvStore.getValue(key);
        });

    }

    @Test
    void testRemoveKeyWithOkResult() throws Throwable {
        String key = "testKey";
        String value = "testValue";

        when(hashStrategy.hash(key)).thenReturn(Result.ok(1L));
        kvStore.begin();
        kvStore.addKey(key, value);

        assertEquals(value, kvStore.getValue(key));

        kvStore.removeKey(key);

        assertNull(kvStore.getValue(key));
    }

}

